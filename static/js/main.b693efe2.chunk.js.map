{"version":3,"sources":["assets/beep.ogg","assets/beep-short.ogg","NumberInput.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NumberInput","add","_this","props","changeValue","subtract","react_default","a","createElement","onClick","this","type","value","readOnly","Component","App","state","isResting","minutes","seconds","intervalID","stopped","pomodoroMinutes","restMinutes","started","frame","Date","now","sec","min","switchTimer","setState","prevState","beep","play","remainingSeconds","shortBeep","start","setInterval","stop","clearInterval","breakTimeChange","Math","max","pomodoroTimeChange","remainingMinutes","_this2","clock","concat","className","NumberInput_NumberInput","ref","src","beepShort","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b693efe2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.ffffc2ca.ogg\";","module.exports = __webpack_public_path__ + \"static/media/beep-short.a2dbe9db.ogg\";","import React, { Component } from 'react';\r\n\r\nexport default class NumberInput extends Component {\r\n  add = () => {\r\n    this.props.changeValue && this.props.changeValue(1);\r\n  };\r\n\r\n  subtract = () => {\r\n    this.props.changeValue && this.props.changeValue(-1);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.subtract}>-</button>\r\n        <input type=\"number\" value={this.props.value} readOnly />\r\n        <button onClick={this.add}>+</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport NumberInput from './NumberInput.jsx';\r\nimport beep from './assets/beep.ogg';\r\nimport beepShort from './assets/beep-short.ogg';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isResting: false,\r\n    minutes: 0,\r\n    seconds: 0,\r\n    intervalID: null,\r\n    stopped: true,\r\n    pomodoroMinutes: 25,\r\n    restMinutes: 5,\r\n    started: null\r\n  };\r\n\r\n  frame = () => {\r\n    const currentTime = Date.now();\r\n    if (\r\n      currentTime >\r\n      this.state.started +\r\n        this.state.minutes * 60 * 1000 +\r\n        (this.state.seconds + 1) * 1000\r\n    ) {\r\n      let sec = this.state.seconds + 1,\r\n        min = this.state.minutes,\r\n        switchTimer = false;\r\n\r\n      if (sec >= 60) {\r\n        sec = 0;\r\n        min += 1;\r\n      }\r\n\r\n      if (this.state.isResting) {\r\n        if (min >= this.state.restMinutes) {\r\n          switchTimer = true;\r\n          min = 0;\r\n          sec = 0;\r\n        }\r\n      } else {\r\n        if (min >= this.state.pomodoroMinutes) {\r\n          switchTimer = true;\r\n          min = 0;\r\n          sec = 0;\r\n        }\r\n      }\r\n\r\n      this.setState(prevState => {\r\n        return {\r\n          seconds: sec,\r\n          minutes: min,\r\n          isResting: switchTimer ? !prevState.isResting : prevState.isResting,\r\n          started: switchTimer ? Date.now() : prevState.started\r\n        };\r\n      });\r\n\r\n      if (switchTimer) this.beep.play();\r\n\r\n      let remainingSeconds = 60 - sec - 1;\r\n\r\n      if (remainingSeconds <= 2 && remainingSeconds >= 0) {\r\n        this.shortBeep.play();\r\n      }\r\n    }\r\n  };\r\n\r\n  start = () => {\r\n    this.beep.play();\r\n    if (this.state.stopped) {\r\n      this.setState({\r\n        minutes: 0,\r\n        seconds: 0,\r\n        isResting: false,\r\n        stopped: false,\r\n        intervalID: setInterval(() => {\r\n          this.frame();\r\n        }, 1000 / 60),\r\n        started: Date.now()\r\n      });\r\n    }\r\n  };\r\n\r\n  stop = () => {\r\n    clearInterval(this.state.intervalID);\r\n    this.setState({\r\n      stopped: true,\r\n      isResting: false,\r\n      minutes: 0,\r\n      seconds: 0,\r\n      started: null\r\n    });\r\n  };\r\n\r\n  breakTimeChange = value => {\r\n    if (this.state.stopped) {\r\n      this.setState(prevState => {\r\n        return {\r\n          restMinutes: Math.max(prevState.restMinutes + value, 1)\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  pomodoroTimeChange = value => {\r\n    if (this.state.stopped) {\r\n      this.setState(prevState => {\r\n        return {\r\n          pomodoroMinutes: Math.max(prevState.pomodoroMinutes + value, 1)\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let remainingMinutes, remainingSeconds;\r\n\r\n    if (this.state.stopped) {\r\n      remainingMinutes = this.state.pomodoroMinutes - this.state.minutes;\r\n      remainingSeconds = 0;\r\n    } else {\r\n      if (this.state.isResting) {\r\n        remainingMinutes = this.state.restMinutes - this.state.minutes - 1;\r\n      } else {\r\n        remainingMinutes = this.state.pomodoroMinutes - this.state.minutes - 1;\r\n      }\r\n      remainingSeconds = 60 - this.state.seconds - 1;\r\n    }\r\n\r\n    const clock = `${remainingMinutes}:${\r\n      remainingSeconds < 10 ? `0` : ``\r\n    }${remainingSeconds}`;\r\n\r\n    return (\r\n      <div className=\"main-pomodoro\">\r\n        <span className=\"timer\">{clock}</span>\r\n        <div className=\"setters-container\">\r\n          <div className=\"setter-wrapper\">\r\n            <NumberInput\r\n              value={this.state.pomodoroMinutes}\r\n              changeValue={this.pomodoroTimeChange}\r\n            />\r\n            <span>min</span>\r\n            <span className=\"setter-type\">POMODORO</span>\r\n          </div>\r\n          <div className=\"setter-wrapper\">\r\n            <NumberInput\r\n              value={this.state.restMinutes}\r\n              changeValue={this.breakTimeChange}\r\n            />\r\n            <span>min</span>\r\n            <span className=\"setter-type\">BREAK</span>\r\n          </div>\r\n        </div>\r\n        <span className=\"prompt\">\r\n          {this.state.stopped\r\n            ? 'Set the timers and press start'\r\n            : this.state.isResting\r\n            ? 'Rest!'\r\n            : 'Work on it!'}\r\n        </span>\r\n        <div className=\"trigger-container\">\r\n          {this.state.stopped ? (\r\n            <button onClick={this.start} className=\"trigger\">\r\n              Start\r\n            </button>\r\n          ) : (\r\n            <button onClick={this.stop} className=\"trigger\">\r\n              Stop\r\n            </button>\r\n          )}\r\n        </div>\r\n        <audio ref={ref => (this.beep = ref)} src={beep} />\r\n        <audio ref={ref => (this.shortBeep = ref)} src={beepShort} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}