{"version":3,"sources":["NumberInput.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NumberInput","state","value","_this","props","add","setState","prevState","changeValue","subtract","react_default","a","createElement","onClick","this","type","readOnly","Component","App","totalTime","previousTime","isResting","intervalID","stopped","pomodoroMinutes","restMinutes","frame","Date","now","start","setInterval","stop","clearInterval","breakTimeChange","pomodoroTimeChange","sec","Math","floor","min","clock","concat","className","NumberInput_NumberInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d67a39c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class NumberInput extends Component {\r\n  state = {\r\n    value: this.props.value || 25\r\n  };\r\n\r\n  add = () => {\r\n    this.setState(\r\n      prevState => {\r\n        return {\r\n          value: prevState.value + 1\r\n        };\r\n      },\r\n      () => {\r\n        this.props.changeValue && this.props.changeValue(this.state.value);\r\n      }\r\n    );\r\n  };\r\n\r\n  subtract = () => {\r\n    if (this.state.value > 1) {\r\n      this.setState(\r\n        prevState => {\r\n          return {\r\n            value: prevState.value - 1\r\n          };\r\n        },\r\n        () => {\r\n          this.props.changeValue && this.props.changeValue(this.state.value);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.subtract}>-</button>\r\n        <input type=\"number\" value={this.state.value} readOnly />\r\n        <button onClick={this.add}>+</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport NumberInput from './NumberInput.jsx';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    totalTime: 0,\r\n    previousTime: 0,\r\n    isResting: false,\r\n    intervalID: null,\r\n    stopped: true,\r\n    pomodoroMinutes: 25,\r\n    restMinutes: 5\r\n  };\r\n\r\n  frame = () => {\r\n    this.setState(\r\n      prevState => {\r\n        return {\r\n          totalTime: prevState.totalTime + Date.now() - prevState.previousTime,\r\n          previousTime: Date.now()\r\n        };\r\n      },\r\n      () => {\r\n        if (this.state.isResting) {\r\n          if (this.state.totalTime / 1000 / 60 > this.state.restMinutes) {\r\n            this.setState({\r\n              isResting: false,\r\n              totalTime: 0\r\n            });\r\n          }\r\n        } else {\r\n          if (this.state.totalTime / 1000 / 60 > this.state.pomodoroMinutes) {\r\n            this.setState({\r\n              isResting: true,\r\n              totalTime: 0\r\n            });\r\n          }\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  start = () => {\r\n    if (this.state.stopped) {\r\n      this.setState({\r\n        totalTime: 0,\r\n        previousTime: Date.now(),\r\n        isResting: false,\r\n        stopped: false,\r\n        intervalID: setInterval(() => {\r\n          this.frame();\r\n        }, 1000 / 60)\r\n      });\r\n    }\r\n  };\r\n\r\n  stop = () => {\r\n    clearInterval(this.state.intervalID);\r\n    this.setState({\r\n      stopped: true\r\n    });\r\n  };\r\n\r\n  breakTimeChange = value => {\r\n    this.setState({\r\n      restMinutes: value\r\n    });\r\n  };\r\n\r\n  pomodoroTimeChange = value => {\r\n    this.setState({\r\n      pomodoroMinutes: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const sec = Math.floor(this.state.totalTime / 1000) % 60,\r\n      min = Math.floor(this.state.totalTime / 1000 / 60);\r\n    const clock = `${min}:${sec < 10 ? `0` : ``}${sec}`;\r\n\r\n    return (\r\n      <div className=\"main-pomodoro\">\r\n        <span className=\"timer\">{clock}</span>\r\n        <div className=\"setters-container\">\r\n          <div className=\"setter-wrapper\">\r\n            <NumberInput\r\n              value={25}\r\n              min={1}\r\n              changeValue={this.pomodoroTimeChange}\r\n            />\r\n            <span>min</span>\r\n            <span className=\"setter-type\">POMODORO</span>\r\n          </div>\r\n          <div className=\"setter-wrapper\">\r\n            <NumberInput value={5} min={1} changeValue={this.breakTimeChange} />\r\n            <span>min</span>\r\n            <span className=\"setter-type\">BREAK</span>\r\n          </div>\r\n        </div>\r\n        <span className=\"prompt\">\r\n          {this.state.stopped\r\n            ? 'Set the timers and press start'\r\n            : this.state.isResting\r\n            ? 'Rest!'\r\n            : 'Work on it!'}\r\n        </span>\r\n        <div className=\"trigger-container\">\r\n          {this.state.stopped ? (\r\n            <button onClick={this.start} className=\"trigger\">\r\n              Start\r\n            </button>\r\n          ) : (\r\n            <button onClick={this.stop} className=\"trigger\">\r\n              Stop\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}